(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, invoke, Led, Flag;
ref$ = require('helpers'), log = ref$.log, invoke = ref$.invoke;
Led = require('./led');
module.exports = Flag = (function(superclass){
  var prototype = extend$((import$(Flag, superclass).displayName = 'Flag', Flag), superclass).prototype, constructor = Flag;
  function Flag(){
    Flag.superclass.apply(this, arguments);
    this.callbacks = [];
    this.dom.addEventListener('click', bind$(this, 'dispatch'));
  }
  prototype.dispatch = function(){
    return this.callbacks.map(invoke);
  };
  prototype.onClick = function(位){
    return this.callbacks.push(位);
  };
  return Flag;
}(Led));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"./led":2,"helpers":5}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, Q, Led;
ref$ = require('helpers'), log = ref$.log, Q = ref$.Q;
module.exports = Led = (function(){
  Led.displayName = 'Led';
  var prototype = Led.prototype, constructor = Led;
  function Led(sel, scope){
    this.dom = Q(sel, scope);
  }
  prototype.on = function(){
    return this.dom.setAttribute('on', true);
  };
  prototype.off = function(){
    return this.dom.removeAttribute('on');
  };
  prototype.set = function(it){
    if (it) {
      return this.on();
    } else {
      return this.off();
    }
  };
  return Led;
}());



},{"helpers":5}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, QSA, Led, LedBits;
ref$ = require('helpers'), log = ref$.log, QSA = ref$.QSA;
Led = require('./led');
module.exports = LedBits = (function(){
  LedBits.displayName = 'LedBits';
  var prototype = LedBits.prototype, constructor = LedBits;
  function LedBits(sel, scope){
    this.dom = QSA(sel, scope).reverse();
    this.leds = this.dom.map(function(it){
      return new Led(it);
    });
  }
  prototype.set = function(it){
    var i$, ref$, len$, ix, led, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.leds).length; i$ < len$; ++i$) {
      ix = i$;
      led = ref$[i$];
      results$.push(led.set(it >> ix & 1));
    }
    return results$;
  };
  return LedBits;
}());



},{"./led":2,"helpers":5}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, Q, pad, Segment;
ref$ = require('helpers'), log = ref$.log, Q = ref$.Q, pad = ref$.pad;
module.exports = Segment = (function(){
  Segment.displayName = 'Segment';
  var prototype = Segment.prototype, constructor = Segment;
  function Segment(sel, len, scope){
    this.len = len != null ? len : 1;
    scope == null && (scope = document);
    this.dom = Q(sel, scope);
    this.base = 16;
    this.set(0);
  }
  prototype.hex = function(it){
    return this.base = it ? 16 : 10;
  };
  prototype.set = function(it){
    return this.dom.textContent = pad(this.len, it.toString(this.base));
  };
  return Segment;
}());



},{"helpers":5}],5:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var log, warn, hex, dec, bin, toArray, wrap, invoke, pad, Q, QSA, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
out$.log = log = function(){
  console.log.apply(this, arguments);
  return arguments[0];
};
out$.warn = warn = function(){
  console.warn.apply(this, arguments);
  return arguments[0];
};
out$.hex = hex = compose$(function(it){
  return it.toString(16);
}, function(it){
  return it.toUpperCase();
});
out$.dec = dec = function(it){
  return it.toString(10);
};
out$.bin = bin = function(it){
  return it.toString(2);
};
out$.toArray = toArray = function(alo){
  return Array.prototype.slice.apply(alo);
};
out$.wrap = wrap = curry$(function(a, b, n){
  if (n < a) {
    return b;
  } else if (n > b) {
    return a;
  } else {
    return n;
  }
});
out$.invoke = invoke = function(位){
  var args;
  args = slice$.call(arguments, 1);
  return 位.apply(null, args);
};
out$.pad = pad = curry$(function(l, n){
  if (n.length < l) {
    return (repeatArray$(['0'], l - n.length)).join('') + n;
  } else {
    return n;
  }
});
out$.Q = Q = function(sel, scope){
  scope == null && (scope = document);
  if (typeof sel !== 'string') {
    return sel;
  } else {
    return scope.querySelector(sel);
  }
};
out$.QSA = QSA = function(sel, scope){
  scope == null && (scope = document);
  if (typeof sel !== 'string') {
    return sel;
  } else {
    return toArray(scope.querySelectorAll(sel));
  }
};
function compose$() {
  var functions = arguments;
  return function() {
    var i, result;
    result = functions[0].apply(this, arguments);
    for (i = 1; i < functions.length; ++i) {
      result = functions[i](result);
    }
    return result;
  };
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function repeatArray$(arr, n){
  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
    if (n & 1) r.push.apply(r, arr);
  return r;
}



},{}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var log, Clock, Counter, Mainbus, Register, Output, ALU, RAM, init, slice$ = [].slice;
log = require('helpers').log;
Clock = require('./modules/clock');
Counter = require('./modules/program-counter');
Mainbus = require('./modules/mainbus');
Register = require('./modules/register');
Output = require('./modules/output');
ALU = require('./modules/alu');
RAM = require('./modules/ram');
init = function(){
  var allModules, clock, pc, ram, bus, alu, regA, regB, output, set, micro, lib, instr, pi;
  allModules = [clock = new Clock('#clock'), pc = new Counter('#program-counter'), ram = new RAM('#ram'), bus = new Mainbus('#mainbus'), alu = new ALU('#alu'), regA = new Register('#register-a'), regB = new Register('#register-b'), output = new Output('#output', 4)];
  alu.exposeRegister('a', regA);
  alu.exposeRegister('b', regB);
  set = function(mod, flag){
    return allModules.filter((function(it){
      return it === mod;
    }))[0].set(flag);
  };
  micro = function(){
    var codes;
    codes = slice$.call(arguments);
    return function(){
      var i$, ref$, len$, code, results$ = [];
      for (i$ = 0, len$ = (ref$ = codes).length; i$ < len$; ++i$) {
        code = ref$[i$];
        switch (code) {
        case 'hlt':
          results$.push(clock.set('halt'));
          break;
        case 'ri':
          results$.push(ram.set('in'));
          break;
        case 'ro':
          results$.push(ram.set('out'));
          break;
        case 'ai':
          results$.push(regA.set('in'));
          break;
        case 'ao':
          results$.push(regA.set('out'));
          break;
        case 'eo':
          results$.push(alu.set('out'));
          break;
        case 'su':
          results$.push(pc.set('ce'));
          break;
        case 'bi':
          results$.push(regB.set('in'));
          break;
        case 'oi':
          results$.push(output.set('in'));
          break;
        case 'ce':
          results$.push(pc.set('inc'));
          break;
        case 'co':
          results$.push(pc.set('out'));
          break;
        default:
          results$.push(warn("Unsupported microinstruction:", code));
        }
      }
      return results$;
    };
  };
  lib = {
    LDA: function(n){
      return [
        micro('ce'), function(){
          return bus.set(n);
        }, micro('ai')
      ];
    },
    ADD: function(n){
      return [
        micro('ce'), function(){
          return bus.set(n);
        }, micro('bi'), micro('eo', 'ai')
      ];
    },
    OUT: function(){
      return [micro('ce'), micro('ao', 'oi')];
    }
  };
  instr = [];
  instr = instr.concat(lib.LDA(28));
  instr = instr.concat(lib.ADD(14));
  instr = instr.concat(lib.OUT());
  pi = 0;
  clock.onClock(function(){
    var that;
    allModules.map(function(it){
      return it.clock(bus);
    });
    allModules.map(function(it){
      return it.clearAll();
    });
    if ((that = instr[pi]) != null) {
      that();
    } else {
      set(clock, 'halt');
    }
    return pi += 1;
  });
  return clock.start();
};
document.addEventListener('DOMContentLoaded', init);



},{"./modules/alu":7,"./modules/clock":8,"./modules/mainbus":9,"./modules/output":11,"./modules/program-counter":12,"./modules/ram":13,"./modules/register":14,"helpers":5}],7:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, warn, Module, Flag, LedBits, ALU;
ref$ = require('helpers'), log = ref$.log, warn = ref$.warn;
Module = require('./module');
Flag = require('../components/flag');
LedBits = require('../components/ledbits');
module.exports = ALU = (function(superclass){
  var prototype = extend$((import$(ALU, superclass).displayName = 'ALU', ALU), superclass).prototype, constructor = ALU;
  function ALU(){
    ALU.superclass.apply(this, arguments);
    this.flag('out');
    this.flag('sub');
    this.value = 0;
    this.inputs = {
      a: {
        value: 0
      },
      b: {
        value: 0
      }
    };
    this.bits = new LedBits('[data-alu-bit]');
    this.flags = {
      sub: new Flag('[data-alu-flag="sub"]'),
      out: new Flag('[data-alu-flag="out"]')
    };
  }
  prototype.exposeRegister = function(name, reg){
    if (this.inputs[name] == null) {
      warn;
    }
    return this.inputs[name] = reg;
  };
  prototype.clock = function(bus){
    var a, b;
    a = this.inputs.a.value;
    b = this.inputs.b.value;
    this.value = this.sub
      ? a - b
      : a + b;
    this.bits.set(this.value);
    if (this.out) {
      log("ALU writing to bus:", this.value);
      return bus.set(this.value);
    }
  };
  return ALU;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/ledbits":3,"./module":10,"helpers":5}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, invoke, Q, Led, Flag, Module, Clock;
ref$ = require('helpers'), log = ref$.log, invoke = ref$.invoke, Q = ref$.Q;
Led = require('../components/led');
Flag = require('../components/flag');
Module = require('./module');
module.exports = Clock = (function(superclass){
  var prototype = extend$((import$(Clock, superclass).displayName = 'Clock', Clock), superclass).prototype, constructor = Clock;
  function Clock(sel){
    this.blip = bind$(this, 'blip', prototype);
    this.step = bind$(this, 'step', prototype);
    Clock.superclass.apply(this, arguments);
    this.halt = true;
    this.rate = 500;
    this.callbacks = [];
    this.signal = new Led('[data-clock-signal]');
    this.button = Q('[data-clock-step]');
    this.flags = {
      halt: new Flag('[data-clock-flag="hlt"]')
    };
    this.blip();
    this.button.addEventListener('click', this.step);
  }
  prototype.start = function(){
    this.clear('halt');
    return this.blip();
  };
  prototype.step = function(){
    this.signal.on();
    setTimeout(bind$(this.signal, 'off'), this.rate / 2);
    return this.callbacks.map(invoke);
  };
  prototype.blip = function(){
    if (!this.halt) {
      this.step();
      return setTimeout(this.blip, this.rate);
    }
  };
  prototype.onClock = function(位){
    return this.callbacks.push(位);
  };
  prototype.clock = function(){};
  return Clock;
}(Module));
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/led":2,"./module":10,"helpers":5}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, warn, pad, LedBits, Segment, Module, Mainbus;
ref$ = require('helpers'), log = ref$.log, warn = ref$.warn, pad = ref$.pad;
LedBits = require('../components/ledbits');
Segment = require('../components/segment');
Module = require('./module');
module.exports = Mainbus = (function(superclass){
  var prototype = extend$((import$(Mainbus, superclass).displayName = 'Mainbus', Mainbus), superclass).prototype, constructor = Mainbus;
  function Mainbus(){
    Mainbus.superclass.apply(this, arguments);
    this.value = 0;
    this.wrote = false;
    this.bits = new LedBits('[data-mb-bit]');
    this.digit = new Segment('[data-mb-value]');
  }
  prototype.set = function(it){
    if (this.wrote) {
      return warn("Mainbus::clock - already got written to this cycle!");
    }
    this.value = it;
    this.bits.set(it);
    this.digit.set(pad(2, it.toString(16)));
    return this.wrote = true;
  };
  prototype.clock = function(){
    return this.wrote = false;
  };
  return Mainbus;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/ledbits":3,"../components/segment":4,"./module":10,"helpers":5}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, warn, Q, Module;
ref$ = require('helpers'), log = ref$.log, warn = ref$.warn, Q = ref$.Q;
module.exports = Module = (function(){
  Module.displayName = 'Module';
  var prototype = Module.prototype, constructor = Module;
  function Module(sel){
    this.dom = Q(sel);
    this.log = false;
    this._flags = [];
  }
  prototype.clock = function(bus){
    return warn("Module " + this.constructor.displayName + " has not impelmented 'clock'");
  };
  prototype.flag = function(name, value){
    value == null && (value = false);
    this[name] = value;
    return this._flags.push(name);
  };
  prototype.set = function(flag){
    var ref$;
    if (this[flag] == null) {
      return warn(this.constructor.displayName + ("::set - no such flag: " + flag));
    }
    if (this.log) {
      log(this.constructor.displayName, 'set', flag);
    }
    this[flag] = true;
    return (ref$ = this.flags) != null ? ref$[flag].set(true) : void 8;
  };
  prototype.flip = function(flag){
    if (this[flag] == null) {
      return warn(this.constructor.displayName + ("::set - no such flag: " + flag));
    }
    if (this[flag]) {
      return this.clear(flag);
    } else {
      return this.set(flag);
    }
  };
  prototype.clear = function(flag){
    var ref$;
    if (this[flag] == null) {
      return warn(this.constructor.displayName + ("::clear - no such flag: " + flag));
    }
    this[flag] = false;
    return (ref$ = this.flags) != null ? ref$[flag].set(false) : void 8;
  };
  prototype.clearAll = function(){
    var i$, ref$, len$, flag, results$ = [];
    for (i$ = 0, len$ = (ref$ = this._flags).length; i$ < len$; ++i$) {
      flag = ref$[i$];
      results$.push(this.clear(flag));
    }
    return results$;
  };
  return Module;
}());



},{"helpers":5}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Module, Flag, Segment, Output;
Module = require('./module');
Flag = require('../components/flag');
Segment = require('../components/segment');
module.exports = Output = (function(superclass){
  var prototype = extend$((import$(Output, superclass).displayName = 'Output', Output), superclass).prototype, constructor = Output;
  function Output(){
    Output.superclass.apply(this, arguments);
    this.flag('in');
    this.value = 0;
    this.display = new Segment('[data-out-value]', 4);
    this.flags = {
      'in': new Flag('[data-out-flag="oi"]')
    };
    this.display.hex(false);
  }
  prototype.clock = function(bus){
    if (this['in']) {
      this.value = bus.value;
    }
    return this.display.set(this.value);
  };
  return Output;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/segment":4,"./module":10}],12:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, wrap, LedBits, Segment, Flag, Module, ProgramCounter;
ref$ = require('helpers'), log = ref$.log, wrap = ref$.wrap;
LedBits = require('../components/ledbits');
Segment = require('../components/segment');
Flag = require('../components/flag');
Module = require('./module');
module.exports = ProgramCounter = (function(superclass){
  var prototype = extend$((import$(ProgramCounter, superclass).displayName = 'ProgramCounter', ProgramCounter), superclass).prototype, constructor = ProgramCounter;
  function ProgramCounter(){
    ProgramCounter.superclass.apply(this, arguments);
    this.flag('inc');
    this.flag('out');
    this.value = 0;
    this.bits = new LedBits('[data-pc-bit]');
    this.digit = new Segment('[data-pc-value]');
    this.flags = {
      inc: new Flag('[data-pc-flag="ce"]'),
      out: new Flag('[data-pc-flag="co"]')
    };
  }
  prototype.clock = function(bus){
    if (this.inc) {
      this.value = wrap(0, 15, this.value + 1);
      this.bits.set(this.value);
      this.digit.set(this.value);
    }
    if (this.out) {
      return bus.set(this.value);
    }
  };
  return ProgramCounter;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/ledbits":3,"../components/segment":4,"./module":10,"helpers":5}],13:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, pad, hex, bin, dec, Flag, LedBits, Module, unlines, RAM;
ref$ = require('helpers'), log = ref$.log, pad = ref$.pad, hex = ref$.hex, bin = ref$.bin, dec = ref$.dec;
Flag = require('../components/flag');
LedBits = require('../components/ledbits');
Module = require('./module');
unlines = function(it){
  return it.join("\n");
};
module.exports = RAM = (function(superclass){
  var prototype = extend$((import$(RAM, superclass).displayName = 'RAM', RAM), superclass).prototype, constructor = RAM;
  function RAM(){
    var this$ = this;
    RAM.superclass.apply(this, arguments);
    this.contents = [30, 47, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 14];
    this.flag('in');
    this.flag('out');
    this.inputs = {
      mar: {
        value: 0
      }
    };
    this.addr = 0;
    this.value = this.contents[0];
    this.bits = new LedBits('[data-ram-bit]');
    this.flags = {
      'in': new Flag('[data-ram-flag="in"]'),
      out: new Flag('[data-ram-flag="out"]')
    };
    this.flags['in'].onClick(function(){
      return this$.flip('in');
    });
    this.flags.out.onClick(function(){
      return this$.flip('out');
    });
  }
  prototype.exposeRegister = function(name, reg){
    return this.inputs[name] = reg;
  };
  prototype.dump = function(){
    var addr, val;
    return log(unlines(['ADDR   BINARY    HEX DEC'].concat((function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.contents).length; i$ < len$; ++i$) {
        addr = i$;
        val = ref$[i$];
        results$.push(' ' + pad(2, hex(addr)) + '    ' + pad(8, bin(val)) + '  ' + pad(2, hex(val)) + '  ' + pad(3, dec(val)));
      }
      return results$;
    }.call(this)))));
  };
  return RAM;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/ledbits":3,"./module":10,"helpers":5}],14:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var log, Module, LedBits, Flag, Register;
log = require('helpers').log;
Module = require('./module');
LedBits = require('../components/ledbits');
Flag = require('../components/flag');
module.exports = Register = (function(superclass){
  var prototype = extend$((import$(Register, superclass).displayName = 'Register', Register), superclass).prototype, constructor = Register;
  function Register(sel){
    Register.superclass.apply(this, arguments);
    this.flag('in');
    this.flag('out');
    this.value = 0;
    this.bits = new LedBits('[data-reg-bit]', this.dom);
    this.flags = {
      'in': new Flag('[data-reg-flag="in"]', this.dom),
      out: new Flag('[data-reg-flag="out"]', this.dom)
    };
  }
  prototype.write = function(it){
    this.value = it;
    return this.bits.set(it);
  };
  prototype.clock = function(bus){
    if (this['in']) {
      return this.write(bus.value);
    }
  };
  return Register;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/ledbits":3,"./module":10,"helpers":5}]},{},[6])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,

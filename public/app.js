(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, invoke, Led, Flag;
ref$ = require('helpers'), log = ref$.log, invoke = ref$.invoke;
Led = require('./led');
module.exports = Flag = (function(superclass){
  var prototype = extend$((import$(Flag, superclass).displayName = 'Flag', Flag), superclass).prototype, constructor = Flag;
  function Flag(){
    Flag.superclass.apply(this, arguments);
    this.callbacks = [];
    this.dom.addEventListener('click', bind$(this, 'dispatch'));
  }
  prototype.dispatch = function(){
    return this.callbacks.map(invoke);
  };
  prototype.onClick = function(λ){
    return this.callbacks.push(λ);
  };
  return Flag;
}(Led));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}



},{"./led":2,"helpers":6}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, Q, Led;
ref$ = require('helpers'), log = ref$.log, Q = ref$.Q;
module.exports = Led = (function(){
  Led.displayName = 'Led';
  var prototype = Led.prototype, constructor = Led;
  function Led(sel, scope){
    this.dom = Q(sel, scope);
  }
  prototype.on = function(){
    return this.dom.setAttribute('on', true);
  };
  prototype.off = function(){
    return this.dom.removeAttribute('on');
  };
  prototype.set = function(it){
    if (it) {
      return this.on();
    } else {
      return this.off();
    }
  };
  return Led;
}());



},{"helpers":6}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, QSA, Led, LedBits;
ref$ = require('helpers'), log = ref$.log, QSA = ref$.QSA;
Led = require('./led');
module.exports = LedBits = (function(){
  LedBits.displayName = 'LedBits';
  var prototype = LedBits.prototype, constructor = LedBits;
  function LedBits(sel, scope){
    this.dom = QSA(sel, scope).reverse();
    this.leds = this.dom.map(function(it){
      return new Led(it);
    });
  }
  prototype.set = function(it){
    var i$, ref$, len$, ix, led, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.leds).length; i$ < len$; ++i$) {
      ix = i$;
      led = ref$[i$];
      results$.push(led.set(it >> ix & 1));
    }
    return results$;
  };
  return LedBits;
}());



},{"./led":2,"helpers":6}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, Q, pad, hex, dec, bin, nibbles, EMPTY, FULL, JOIN, READ, WRITE, binToCell, row, inspectText, hide, show, move, MemoryDump;
ref$ = require('helpers'), log = ref$.log, Q = ref$.Q, pad = ref$.pad, hex = ref$.hex, dec = ref$.dec, bin = ref$.bin, nibbles = ref$.nibbles;
EMPTY = '◼';
FULL = '◻';
JOIN = '<br>';
JOIN = '';
READ = 'read';
WRITE = 'write';
binToCell = function(b){
  return b.replace(/0/g, EMPTY).replace(/1/g, FULL);
};
row = function(v, addr, i, mode){
  var cell;
  cell = binToCell(pad(8, bin(v))).split('');
  return ("<div data-addr='" + addr + "' data-value='" + v + "' ") + (addr === i ? mode : "") + ">" + cell.join(JOIN) + "</div>";
};
inspectText = function(value, addr){
  var ref$, high, low, instr;
  ref$ = nibbles(value), high = ref$[0], low = ref$[1];
  instr = ['NOP', 'LDA', 'ADD', '___', '___', '___', '___', '___', '___', '___', '___', '___', '___', '___', 'OUT', 'HLT'][high];
  if (deepEq$(value, 0, '===')) {
    return addr + ": <empty>";
  } else if (deepEq$(instr, 'NOP', '===')) {
    return addr + ": " + value + " literal";
  } else if (deepEq$(low, 0, '===')) {
    return addr + ": " + instr;
  } else {
    return addr + ": " + instr + " " + low + " OR " + value + " literal";
  }
};
hide = function(node){
  return node.style.display = 'none';
};
show = function(node){
  return node.style.display = 'block';
};
move = function(node, x, y){
  var ref$;
  return ref$ = node.style, ref$.left = x + 'px', ref$.top = y + 'px', ref$;
};
module.exports = MemoryDump = (function(){
  MemoryDump.displayName = 'MemoryDump';
  var inspector, prototype = MemoryDump.prototype, constructor = MemoryDump;
  inspector = document.createElement('div');
  inspector.classList.add('inspector');
  hide(inspector);
  function MemoryDump(sel){
    var updateInspector, this$ = this;
    this.dom = Q(sel);
    updateInspector = function(v, a, x, y){
      move(inspector, x + 4, y);
      inspector.textContent = inspectText(parseInt(v), a);
      return show(inspector);
    };
    this.dom.addEventListener('mouseover', function(arg$){
      var target, pageX, pageY, data;
      target = arg$.target, pageX = arg$.pageX, pageY = arg$.pageY;
      data = target.dataset;
      return updateInspector(data.value, data.addr, pageX, pageY);
    });
    this.dom.addEventListener('mousemove', function(arg$){
      var target, dataset, pageX, pageY;
      target = arg$.target, dataset = target.dataset, pageX = arg$.pageX, pageY = arg$.pageY;
      return updateInspector(dataset.value, dataset.addr, pageX, pageY);
    });
    this.dom.addEventListener('mouseout', function(arg$){
      var target;
      target = arg$.target;
      return hide(inspector);
    });
    document.body.appendChild(inspector);
  }
  prototype.set = function(cells, addr, writeEnabled){
    var mode, i, v;
    writeEnabled == null && (writeEnabled = false);
    mode = writeEnabled ? WRITE : READ;
    return this.dom.innerHTML = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = cells).length; i$ < len$; ++i$) {
        i = i$;
        v = ref$[i$];
        results$.push(row(v, i, addr, mode));
      }
      return results$;
    }()).join('');
  };
  return MemoryDump;
}());
function deepEq$(x, y, type){
  var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
      has = function (obj, key) { return hasOwnProperty.call(obj, key); };
  var first = true;
  return eq(x, y, []);
  function eq(a, b, stack) {
    var className, length, size, result, alength, blength, r, key, ref, sizeB;
    if (a == null || b == null) { return a === b; }
    if (a.__placeholder__ || b.__placeholder__) { return true; }
    if (a === b) { return a !== 0 || 1 / a == 1 / b; }
    className = toString.call(a);
    if (toString.call(b) != className) { return false; }
    switch (className) {
      case '[object String]': return a == String(b);
      case '[object Number]':
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        return +a == +b;
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') { return false; }
    length = stack.length;
    while (length--) { if (stack[length] == a) { return true; } }
    stack.push(a);
    size = 0;
    result = true;
    if (className == '[object Array]') {
      alength = a.length;
      blength = b.length;
      if (first) {
        switch (type) {
        case '===': result = alength === blength; break;
        case '<==': result = alength <= blength; break;
        case '<<=': result = alength < blength; break;
        }
        size = alength;
        first = false;
      } else {
        result = alength === blength;
        size = alength;
      }
      if (result) {
        while (size--) {
          if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
        }
      }
    } else {
      if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
        return false;
      }
      for (key in a) {
        if (has(a, key)) {
          size++;
          if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
        }
      }
      if (result) {
        sizeB = 0;
        for (key in b) {
          if (has(b, key)) { ++sizeB; }
        }
        if (first) {
          if (type === '<<=') {
            result = size < sizeB;
          } else if (type === '<==') {
            result = size <= sizeB
          } else {
            result = size === sizeB;
          }
        } else {
          first = false;
          result = size === sizeB;
        }
      }
    }
    stack.pop();
    return result;
  }
}



},{"helpers":6}],5:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, Q, pad, Segment;
ref$ = require('helpers'), log = ref$.log, Q = ref$.Q, pad = ref$.pad;
module.exports = Segment = (function(){
  Segment.displayName = 'Segment';
  var prototype = Segment.prototype, constructor = Segment;
  function Segment(sel, len, scope){
    this.len = len != null ? len : 1;
    scope == null && (scope = document);
    this.dom = Q(sel, scope);
    this.base = 16;
    this.set(0);
  }
  prototype.hex = function(it){
    return this.base = it ? 16 : 10;
  };
  prototype.set = function(it){
    return this.dom.textContent = pad(this.len, it.toString(this.base));
  };
  return Segment;
}());



},{"helpers":6}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var log, warn, invoke, hex, dec, bin, wrap, nibbles, pad, toArray, unlines, zip, Q, QSA, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
out$.log = log = function(){
  console.log.apply(this, arguments);
  return arguments[0];
};
out$.warn = warn = function(){
  console.warn.apply(this, arguments);
  return arguments[0];
};
out$.invoke = invoke = function(λ){
  var args;
  args = slice$.call(arguments, 1);
  return λ.apply(null, args);
};
out$.hex = hex = compose$(function(it){
  return it.toString(16);
}, function(it){
  return it.toUpperCase();
});
out$.dec = dec = function(it){
  return it.toString(10);
};
out$.bin = bin = function(it){
  return it.toString(2);
};
out$.wrap = wrap = curry$(function(a, b, n){
  if (n < a) {
    return b;
  } else if (n > b) {
    return a;
  } else {
    return n;
  }
});
out$.nibbles = nibbles = function(byte){
  return [byte >> 4, byte & 15];
};
out$.pad = pad = curry$(function(l, n){
  if (n.length < l) {
    return (repeatArray$(['0'], l - n.length)).join('') + n;
  } else {
    return n;
  }
});
out$.toArray = toArray = function(alo){
  return Array.prototype.slice.apply(alo);
};
out$.unlines = unlines = function(it){
  return it.join("\n");
};
out$.zip = zip = function(as, bs){
  var out, i$, len$, ix, a, b;
  out = [];
  for (i$ = 0, len$ = as.length; i$ < len$; ++i$) {
    ix = i$;
    a = as[i$];
    b = bs[ix];
    out.push(a);
    out.push(b);
  }
  return out;
};
out$.Q = Q = function(sel, scope){
  scope == null && (scope = document);
  if (typeof sel !== 'string') {
    return sel;
  } else {
    return scope.querySelector(sel);
  }
};
out$.QSA = QSA = function(sel, scope){
  scope == null && (scope = document);
  if (typeof sel !== 'string') {
    return sel;
  } else {
    return toArray(scope.querySelectorAll(sel));
  }
};
function compose$() {
  var functions = arguments;
  return function() {
    var i, result;
    result = functions[0].apply(this, arguments);
    for (i = 1; i < functions.length; ++i) {
      result = functions[i](result);
    }
    return result;
  };
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function repeatArray$(arr, n){
  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
    if (n & 1) r.push.apply(r, arr);
  return r;
}



},{}],7:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, wrap, Clock, ProgramCounter, Mainbus, Register, Output, ALU, RAM, MemoryAccessRegister, Control, InstructionRegister, init, slice$ = [].slice;
ref$ = require('helpers'), log = ref$.log, wrap = ref$.wrap;
Clock = require('./modules/clock');
ProgramCounter = require('./modules/program-counter');
Mainbus = require('./modules/mainbus');
Register = require('./modules/register');
Output = require('./modules/output');
ALU = require('./modules/alu');
RAM = require('./modules/ram');
MemoryAccessRegister = require('./modules/mar');
Control = require('./modules/control');
InstructionRegister = require('./modules/instruction-register');
init = function(){
  var allModules, bus, clock, pc, mar, ram, regI, regA, regB, alu, output, control, set, micro, mpc, ref$, NOP, LDA, ADD, SUB, STA, _, JMP, LOI, JC, OUT, HLT, microcode;
  allModules = [bus = new Mainbus('#mainbus'), clock = new Clock('#clock'), pc = new ProgramCounter('#program-counter'), mar = new MemoryAccessRegister('#mar'), ram = new RAM('#ram'), regI = new InstructionRegister('#instr'), regA = new Register('#register-a'), regB = new Register('#register-b'), alu = new ALU('#alu'), output = new Output('#output', 4), control = new Control('#control')];
  alu.exposeRegister('a', regA);
  alu.exposeRegister('b', regB);
  ram.exposeRegister('mar', mar);
  set = function(mod, flag){
    return allModules.filter((function(it){
      return it === mod;
    }))[0].set(flag);
  };
  micro = function(){
    var codes, i$, len$, code, results$ = [];
    codes = slice$.call(arguments);
    for (i$ = 0, len$ = codes.length; i$ < len$; ++i$) {
      code = codes[i$];
      control.set(code);
      switch (code) {
      case 'hlt':
        results$.push(clock.set('halt'));
        break;
      case 'mi':
        results$.push(mar.set('in'));
        break;
      case 'ri':
        results$.push(ram.set('in'));
        break;
      case 'ro':
        results$.push(ram.set('out'));
        break;
      case 'ii':
        results$.push(regI.set('in'));
        break;
      case 'io':
        results$.push(regI.set('out'));
        break;
      case 'ai':
        results$.push(regA.set('in'));
        break;
      case 'ao':
        results$.push(regA.set('out'));
        break;
      case 'eo':
        results$.push(alu.set('out'));
        break;
      case 'su':
        results$.push(alu.set('sub'));
        break;
      case 'bi':
        results$.push(regB.set('in'));
        break;
      case 'oi':
        results$.push(output.set('in'));
        break;
      case 'ce':
        results$.push(pc.set('inc'));
        break;
      case 'co':
        results$.push(pc.set('out'));
        break;
      case 'j':
        results$.push(pc.set('jmp'));
        break;
      default:
        results$.push(warn("Unsupported microinstruction:", code));
      }
    }
    return results$;
  };
  mpc = 0;
  ref$ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], NOP = ref$[0], LDA = ref$[1], ADD = ref$[2], SUB = ref$[3], STA = ref$[4], _ = ref$[5], JMP = ref$[6], LOI = ref$[7], JC = ref$[8], _ = ref$[9], _ = ref$[10], _ = ref$[11], _ = ref$[12], _ = ref$[13], OUT = ref$[14], HLT = ref$[15];
  microcode = function(mpc, instr, arg){
    var steps, action;
    arg == null && (arg = 0);
    steps = mpc < 3
      ? [['co', 'mi'], ['ro', 'ii'], ['ce']]
      : (function(){
        switch (instr) {
        case NOP:
          return [];
        case LDA:
          return [['io', 'mi'], ['ro', 'ai']];
        case ADD:
          return [['io', 'mi'], ['ro', 'bi'], ['eo', 'ai']];
        case SUB:
          return [['io', 'mi'], ['ro', 'bi'], ['su', 'eo', 'ai']];
        case STA:
          return [['io', 'mi'], ['ri', 'ao']];
        case JMP:
          return [['io', 'ci']];
        case LOI:
          return [['io', 'ai']];
        case OUT:
          return [['ao', 'oi']];
        case HLT:
          return [['hlt']];
        }
      }());
    if (action = steps[mpc % 3]) {
      return micro.apply(null, action);
    }
  };
  clock.onClock(function(){
    allModules.map(function(it){
      return it.rise(bus);
    });
    allModules.map(function(it){
      return it.fall(bus);
    });
    allModules.map(function(it){
      return it.clearAll();
    });
    microcode(mpc, regI.instr, regI.arg);
    return mpc = wrap(0, 5, mpc + 1);
  });
  return clock.rate = 20;
};
document.addEventListener('DOMContentLoaded', init);



},{"./modules/alu":8,"./modules/clock":9,"./modules/control":10,"./modules/instruction-register":11,"./modules/mainbus":12,"./modules/mar":13,"./modules/output":15,"./modules/program-counter":16,"./modules/ram":17,"./modules/register":18,"helpers":6}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, warn, Module, Flag, LedBits, ALU;
ref$ = require('helpers'), log = ref$.log, warn = ref$.warn;
Module = require('./module');
Flag = require('../components/flag');
LedBits = require('../components/ledbits');
module.exports = ALU = (function(superclass){
  var prototype = extend$((import$(ALU, superclass).displayName = 'ALU', ALU), superclass).prototype, constructor = ALU;
  function ALU(){
    ALU.superclass.apply(this, arguments);
    this.flag('out');
    this.flag('sub');
    this.value = 0;
    this.inputs = {
      a: {
        value: 0
      },
      b: {
        value: 0
      }
    };
    this.bits = new LedBits('[data-alu-bit]');
    this.flags = {
      sub: new Flag('[data-alu-flag="sub"]'),
      out: new Flag('[data-alu-flag="out"]')
    };
  }
  prototype.exposeRegister = function(name, reg){
    if (this.inputs[name] == null) {
      warn;
    }
    return this.inputs[name] = reg;
  };
  prototype.rise = function(bus){
    if (this.out) {
      return bus.set(this.value);
    }
  };
  prototype.fall = function(){
    var a, b;
    a = this.inputs.a.value;
    b = this.inputs.b.value;
    this.value = this.sub
      ? a - b
      : a + b;
    return this.bits.set(this.value);
  };
  return ALU;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/ledbits":3,"./module":14,"helpers":6}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, invoke, Q, Led, Flag, Module, Clock;
ref$ = require('helpers'), log = ref$.log, invoke = ref$.invoke, Q = ref$.Q;
Led = require('../components/led');
Flag = require('../components/flag');
Module = require('./module');
module.exports = Clock = (function(superclass){
  var prototype = extend$((import$(Clock, superclass).displayName = 'Clock', Clock), superclass).prototype, constructor = Clock;
  function Clock(sel){
    var this$ = this;
    this.blip = bind$(this, 'blip', prototype);
    this.step = bind$(this, 'step', prototype);
    Clock.superclass.apply(this, arguments);
    this.halt = true;
    this.rate = 200;
    this.callbacks = [];
    this.signal = new Led('[data-clock-signal]');
    this.button = Q('[data-clock-step]');
    this.flags = {
      halt: new Flag('[data-clock-flag="hlt"]')
    };
    this.blip();
    this.flags.halt.onClick(function(){
      return this$.flip('halt');
    });
    this.button.addEventListener('click', this.step);
  }
  prototype.start = function(){
    this.clear('halt');
    return this.blip();
  };
  prototype.step = function(){
    this.signal.on();
    setTimeout(bind$(this.signal, 'off'), this.rate / 2);
    return this.callbacks.map(invoke);
  };
  prototype.blip = function(){
    if (!this.halt) {
      this.step();
      return setTimeout(this.blip, this.rate);
    }
  };
  prototype.onClock = function(λ){
    return this.callbacks.push(λ);
  };
  prototype.rise = function(){};
  prototype.fall = function(){};
  return Clock;
}(Module));
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/led":2,"./module":14,"helpers":6}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var log, Flag, LedBits, Module, ControlReadout;
log = require('helpers').log;
Flag = require('../components/flag');
LedBits = require('../components/ledbits');
Module = require('./module');
module.exports = ControlReadout = (function(superclass){
  var prototype = extend$((import$(ControlReadout, superclass).displayName = 'ControlReadout', ControlReadout), superclass).prototype, constructor = ControlReadout;
  function ControlReadout(sel){
    ControlReadout.superclass.apply(this, arguments);
    this.flag('hlt');
    this.flag('mi');
    this.flag('ri');
    this.flag('ro');
    this.flag('io');
    this.flag('ii');
    this.flag('ai');
    this.flag('ao');
    this.flag('eo');
    this.flag('su');
    this.flag('bi');
    this.flag('oi');
    this.flag('ce');
    this.flag('co');
    this.flag('j');
    this.flags = {
      hlt: new Flag('[data-cv="hlt"]', this.dom),
      mi: new Flag('[data-cv="mi"]', this.dom),
      ri: new Flag('[data-cv="ri"]', this.dom),
      ro: new Flag('[data-cv="ro"]', this.dom),
      io: new Flag('[data-cv="io"]', this.dom),
      ii: new Flag('[data-cv="ii"]', this.dom),
      ai: new Flag('[data-cv="ai"]', this.dom),
      ao: new Flag('[data-cv="ao"]', this.dom),
      eo: new Flag('[data-cv="eo"]', this.dom),
      su: new Flag('[data-cv="su"]', this.dom),
      bi: new Flag('[data-cv="bi"]', this.dom),
      oi: new Flag('[data-cv="oi"]', this.dom),
      ce: new Flag('[data-cv="ce"]', this.dom),
      co: new Flag('[data-cv="co"]', this.dom),
      j: new Flag('[data-cv="j"]', this.dom)
    };
  }
  prototype.write = function(it){
    return this.value = it;
  };
  prototype.rise = function(){};
  prototype.fall = function(){};
  return ControlReadout;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/ledbits":3,"./module":14,"helpers":6}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, id, log, nibbles, Segment, LedBits, Flag, Module, InstructionRegister;
ref$ = require('helpers'), id = ref$.id, log = ref$.log, nibbles = ref$.nibbles;
Segment = require('../components/segment');
LedBits = require('../components/ledbits');
Flag = require('../components/flag');
Module = require('./module');
module.exports = InstructionRegister = (function(superclass){
  var prototype = extend$((import$(InstructionRegister, superclass).displayName = 'InstructionRegister', InstructionRegister), superclass).prototype, constructor = InstructionRegister;
  function InstructionRegister(){
    InstructionRegister.superclass.apply(this, arguments);
    this.flag('in');
    this.flag('out');
    this.value = 0;
    this.instr = 0;
    this.arg = 0;
    this.bits = new LedBits('[data-instr-bit]');
    this.flags = {
      'in': new Flag('[data-instr-flag="in"]'),
      out: new Flag('[data-instr-flag="out"]')
    };
    this.digits = {
      instr: new Segment('[data-instr-value]'),
      arg: new Segment('[data-arg-value]')
    };
  }
  prototype.write = function(value){
    var ref$;
    this.value = value;
    ref$ = nibbles(this.value), this.instr = ref$[0], this.arg = ref$[1];
    this.bits.set(this.value);
    this.digits.instr.set(this.instr);
    return this.digits.arg.set(this.arg);
  };
  prototype.rise = function(bus){
    if (this.out) {
      return bus.set(this.arg);
    }
  };
  prototype.fall = function(bus){
    if (this['in']) {
      return this.write(bus.value);
    }
  };
  return InstructionRegister;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/ledbits":3,"../components/segment":5,"./module":14,"helpers":6}],12:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, warn, pad, LedBits, Segment, Module, Mainbus;
ref$ = require('helpers'), log = ref$.log, warn = ref$.warn, pad = ref$.pad;
LedBits = require('../components/ledbits');
Segment = require('../components/segment');
Module = require('./module');
module.exports = Mainbus = (function(superclass){
  var prototype = extend$((import$(Mainbus, superclass).displayName = 'Mainbus', Mainbus), superclass).prototype, constructor = Mainbus;
  function Mainbus(){
    Mainbus.superclass.apply(this, arguments);
    this.value = 0;
    this.wrote = false;
    this.bits = new LedBits('[data-mb-bit]');
    this.digit = new Segment('[data-mb-value]');
  }
  prototype.set = function(it){
    if (this.wrote) {
      return warn("Mainbus::clock - already got written to this cycle!");
    }
    this.value = it;
    this.wrote = true;
    this.bits.set(it);
    return this.digit.set(pad(2, it.toString(16)));
  };
  prototype.rise = function(){};
  prototype.fall = function(){
    return this.wrote = false;
  };
  return Mainbus;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/ledbits":3,"../components/segment":5,"./module":14,"helpers":6}],13:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var log, Flag, LedBits, Module, MemoryAccessRegister;
log = require('helpers').log;
Flag = require('../components/flag');
LedBits = require('../components/ledbits');
Module = require('./module');
module.exports = MemoryAccessRegister = (function(superclass){
  var prototype = extend$((import$(MemoryAccessRegister, superclass).displayName = 'MemoryAccessRegister', MemoryAccessRegister), superclass).prototype, constructor = MemoryAccessRegister;
  function MemoryAccessRegister(sel){
    MemoryAccessRegister.superclass.apply(this, arguments);
    this.flag('in');
    this.value = 0;
    this.bits = new LedBits('[data-mar-bit]', this.dom);
    this.flags = {
      'in': new Flag('[data-flag="in"]', this.dom)
    };
  }
  prototype.write = function(it){
    this.value = it;
    return this.bits.set(it);
  };
  prototype.rise = function(bus){};
  prototype.fall = function(bus){
    if (this['in']) {
      return this.write(bus.value);
    }
  };
  return MemoryAccessRegister;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/ledbits":3,"./module":14,"helpers":6}],14:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, warn, Q, Module;
ref$ = require('helpers'), log = ref$.log, warn = ref$.warn, Q = ref$.Q;
module.exports = Module = (function(){
  Module.displayName = 'Module';
  var prototype = Module.prototype, constructor = Module;
  function Module(sel){
    this.dom = Q(sel);
    this.log = false;
    this._flags = [];
  }
  prototype.rise = function(bus){
    var name;
    name = this.constructor.displayName;
    return warn("Module " + name + " has not impelmented 'rise'");
  };
  prototype.fall = function(bus){
    var name;
    name = this.constructor.displayName;
    return warn("Module " + name + " has not impelmented 'fall'");
  };
  prototype.flag = function(name, value){
    value == null && (value = false);
    this[name] = value;
    return this._flags.push(name);
  };
  prototype.set = function(flag){
    var ref$;
    if (this[flag] == null) {
      return warn(this.constructor.displayName + ("::set - no such flag: " + flag));
    }
    if (this.log) {
      log(this.constructor.displayName, 'set', flag);
    }
    this[flag] = true;
    return (ref$ = this.flags) != null ? ref$[flag].set(true) : void 8;
  };
  prototype.flip = function(flag){
    if (this[flag] == null) {
      return warn(this.constructor.displayName + ("::set - no such flag: " + flag));
    }
    if (this[flag]) {
      return this.clear(flag);
    } else {
      return this.set(flag);
    }
  };
  prototype.clear = function(flag){
    var ref$;
    if (this[flag] == null) {
      return warn(this.constructor.displayName + ("::clear - no such flag: " + flag));
    }
    this[flag] = false;
    return (ref$ = this.flags) != null ? ref$[flag].set(false) : void 8;
  };
  prototype.clearAll = function(){
    var i$, ref$, len$, flag, results$ = [];
    for (i$ = 0, len$ = (ref$ = this._flags).length; i$ < len$; ++i$) {
      flag = ref$[i$];
      results$.push(this.clear(flag));
    }
    return results$;
  };
  return Module;
}());



},{"helpers":6}],15:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Module, Flag, Segment, Output;
Module = require('./module');
Flag = require('../components/flag');
Segment = require('../components/segment');
module.exports = Output = (function(superclass){
  var prototype = extend$((import$(Output, superclass).displayName = 'Output', Output), superclass).prototype, constructor = Output;
  function Output(){
    Output.superclass.apply(this, arguments);
    this.flag('in');
    this.value = 0;
    this.display = new Segment('[data-out-value]', 4);
    this.flags = {
      'in': new Flag('[data-out-flag="oi"]')
    };
    this.display.hex(false);
  }
  prototype.rise = function(){};
  prototype.fall = function(bus){
    if (this['in']) {
      this.value = bus.value;
    }
    return this.display.set(this.value);
  };
  return Output;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/segment":5,"./module":14}],16:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, wrap, LedBits, Segment, Flag, Module, ProgramCounter;
ref$ = require('helpers'), log = ref$.log, wrap = ref$.wrap;
LedBits = require('../components/ledbits');
Segment = require('../components/segment');
Flag = require('../components/flag');
Module = require('./module');
module.exports = ProgramCounter = (function(superclass){
  var prototype = extend$((import$(ProgramCounter, superclass).displayName = 'ProgramCounter', ProgramCounter), superclass).prototype, constructor = ProgramCounter;
  function ProgramCounter(){
    ProgramCounter.superclass.apply(this, arguments);
    this.flag('inc');
    this.flag('out');
    this.flag('jmp');
    this.value = 0;
    this.bits = new LedBits('[data-pc-bit]');
    this.digit = new Segment('[data-pc-value]');
    this.flags = {
      inc: new Flag('[data-pc-flag="ce"]'),
      out: new Flag('[data-pc-flag="co"]'),
      jmp: new Flag('[data-pc-flag="j"]')
    };
  }
  prototype.increment = function(){
    this.value = wrap(0, 15, this.value + 1);
    this.bits.set(this.value);
    return this.digit.set(this.value);
  };
  prototype.rise = function(bus){
    if (this.out) {
      return bus.set(this.value);
    }
  };
  prototype.fall = function(bus){
    if (this.inc) {
      return this.increment();
    }
  };
  return ProgramCounter;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/ledbits":3,"../components/segment":5,"./module":14,"helpers":6}],17:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, log, warn, Flag, LedBits, MemoryDump, Module, unlines, RAM;
ref$ = require('helpers'), log = ref$.log, warn = ref$.warn;
Flag = require('../components/flag');
LedBits = require('../components/ledbits');
MemoryDump = require('../components/memory');
Module = require('./module');
unlines = function(it){
  return it.join("\n");
};
module.exports = RAM = (function(superclass){
  var prototype = extend$((import$(RAM, superclass).displayName = 'RAM', RAM), superclass).prototype, constructor = RAM;
  function RAM(){
    RAM.superclass.apply(this, arguments);
    this.contents = [30, 47, 224, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 15];
    this.flag('in');
    this.flag('out');
    this.inputs = {
      mar: {
        value: 0
      }
    };
    this.addr = 0;
    this.value = this.contents[this.addr];
    this.bits = new LedBits('[data-ram-bit]');
    this.dump = new MemoryDump('[data-ram-dump]');
    this.flags = {
      'in': new Flag('[data-ram-flag="in"]'),
      out: new Flag('[data-ram-flag="out"]')
    };
    this.dump.set(this.contents, this.addr, this['in']);
    this.bits.set(this.value);
  }
  prototype.exposeRegister = function(name, reg){
    return this.inputs[name] = reg;
  };
  prototype.dump = function(){
    var addr, val;
    return log(unlines(['ADDR   BINARY    HEX DEC'].concat((function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.contents).length; i$ < len$; ++i$) {
        addr = i$;
        val = ref$[i$];
        results$.push(' ' + pad(2, hex(addr)) + '    ' + pad(8, bin(val)) + '  ' + pad(2, hex(val)) + '  ' + pad(3, dec(val)));
      }
      return results$;
    }.call(this)))));
  };
  prototype.move = function(addr){
    this.addr = addr;
    this.value = this.contents[this.addr];
    this.bits.set(this.value);
    return this.dump.set(this.contents, this.addr, this['in']);
  };
  prototype.rise = function(bus){
    if (this.out) {
      return bus.set(this.value);
    }
  };
  prototype.fall = function(bus){
    return this.move(this.inputs.mar.value);
  };
  return RAM;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/ledbits":3,"../components/memory":4,"./module":14,"helpers":6}],18:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var log, Module, LedBits, Flag, Register;
log = require('helpers').log;
Module = require('./module');
LedBits = require('../components/ledbits');
Flag = require('../components/flag');
module.exports = Register = (function(superclass){
  var prototype = extend$((import$(Register, superclass).displayName = 'Register', Register), superclass).prototype, constructor = Register;
  function Register(sel){
    Register.superclass.apply(this, arguments);
    this.flag('in');
    this.flag('out');
    this.value = 0;
    this.bits = new LedBits('[data-reg-bit]', this.dom);
    this.flags = {
      'in': new Flag('[data-reg-flag="in"]', this.dom),
      out: new Flag('[data-reg-flag="out"]', this.dom)
    };
  }
  prototype.write = function(it){
    this.value = it;
    return this.bits.set(it);
  };
  prototype.rise = function(bus){
    if (this.out) {
      return bus.set(this.value);
    }
  };
  prototype.fall = function(bus){
    if (this['in']) {
      return this.write(bus.value);
    }
  };
  return Register;
}(Module));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"../components/flag":1,"../components/ledbits":3,"./module":14,"helpers":6}]},{},[7])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
